/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.swagger.test.swagger.controllers;

import com.swagger.test.swagger.models.Response;
import com.swagger.test.swagger.models.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-09T10:26:22.199Z")

@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "Add a new user to the system", nickname = "addUser", notes = "", response = Response.class, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Response.class),
        @ApiResponse(code = 201, message = "Created", response = Response.class),
        @ApiResponse(code = 405, message = "Invalid input", response = Response.class) })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Response> addUser(@ApiParam(value = "User object that needs to be added to the system", required = true) @Valid @RequestBody User body);


    @ApiOperation(value = "delete pet by ID", nickname = "deleteById", notes = "Delete single user", response = Response.class, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Response.class),
        @ApiResponse(code = 400, message = "error", response = Response.class) })
    @RequestMapping(value = "/user/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Response> deleteById(@ApiParam(value = "ID of deleting user", required = true) @PathVariable("id") Long id);


    @ApiOperation(value = "Find user by id", nickname = "getUserById", notes = "Get user data related to input id", response = User.class, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class),
        @ApiResponse(code = 400, message = "Invalid status value", response = Response.class) })
    @RequestMapping(value = "/user/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getUserById(@ApiParam(value = "ID of deleting user", required = true) @PathVariable("id") Long id);


    @ApiOperation(value = "Add a new user to the system", nickname = "updateUser", notes = "", response = User.class, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = User.class),
        @ApiResponse(code = 201, message = "Created", response = Response.class),
        @ApiResponse(code = 405, message = "Invalid input", response = Response.class) })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<User> updateUser(@ApiParam(value = "User object that needs to be updated in the system", required = true) @Valid @RequestBody User body);

}
